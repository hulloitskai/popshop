export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  Date: string;
};

export type Account = Node & {
  __typename?: 'Account';
  /** ID of the object. */
  id: Scalars['ID'];
  name: Scalars['String'];
  owner: User;
  products: Array<Product>;
};

/** Autogenerated input type of AccountUpdate */
export type AccountUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of AccountUpdate. */
export type AccountUpdatePayload = {
  __typename?: 'AccountUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<ValidationError>>;
  user?: Maybe<User>;
};

export type Currency = {
  __typename?: 'Currency';
  code: Scalars['String'];
  exponent: Scalars['Int'];
  name: Scalars['String'];
  symbol: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  accountUpdate: AccountUpdatePayload;
  productCreate: ProductCreatePayload;
  productUpdate: ProductUpdatePayload;
  testMutation: TestMutationPayload;
};


export type MutationAccountUpdateArgs = {
  input: AccountUpdateInput;
};


export type MutationProductCreateArgs = {
  input: ProductCreateInput;
};


export type MutationProductUpdateArgs = {
  input: ProductUpdateInput;
};


export type MutationTestMutationArgs = {
  input: TestMutationInput;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'];
};

export type Price = Node & {
  __typename?: 'Price';
  amount: Scalars['String'];
  amountCents: Scalars['Int'];
  currencyCode: Scalars['String'];
  /** ID of the object. */
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  scope: Scope;
  units?: Maybe<Units>;
};

export type PriceInput = {
  amount?: InputMaybe<Scalars['String']>;
  amountCents?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  scope: Scope;
  units?: InputMaybe<Scalars['String']>;
};

export type Product = Node & {
  __typename?: 'Product';
  account: Account;
  currencyCode: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  /** ID of the object. */
  id: Scalars['ID'];
  name: Scalars['String'];
  prices: Array<Price>;
  url: Scalars['String'];
};

/** Autogenerated input type of ProductCreate */
export type ProductCreateInput = {
  accountId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  currencyCode: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  prices: Array<PriceInput>;
};

/** Autogenerated return type of ProductCreate. */
export type ProductCreatePayload = {
  __typename?: 'ProductCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<ValidationError>>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of ProductUpdate */
export type ProductUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  productId: Scalars['ID'];
};

/** Autogenerated return type of ProductUpdate. */
export type ProductUpdatePayload = {
  __typename?: 'ProductUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<ValidationError>>;
  product?: Maybe<Product>;
};

export type Query = {
  __typename?: 'Query';
  currencies: Array<Currency>;
  currency?: Maybe<Currency>;
  product: Product;
  testEcho: Scalars['String'];
  /** The currently authenticated user. */
  viewer?: Maybe<User>;
};


export type QueryCurrencyArgs = {
  code: Scalars['String'];
};


export type QueryProductArgs = {
  id: Scalars['ID'];
};


export type QueryTestEchoArgs = {
  text?: InputMaybe<Scalars['String']>;
};

export enum Scope {
  PerOrder = 'PER_ORDER',
  PerPerson = 'PER_PERSON',
  PerUnit = 'PER_UNIT'
}

export type Subscription = {
  __typename?: 'Subscription';
  testSubscription: Scalars['Int'];
};

export type TestModel = {
  __typename?: 'TestModel';
  birthday?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of TestMutation */
export type TestMutationInput = {
  birthday?: InputMaybe<Scalars['Date']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of TestMutation. */
export type TestMutationPayload = {
  __typename?: 'TestMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<ValidationError>>;
  model?: Maybe<TestModel>;
};

export type Units = {
  __typename?: 'Units';
  plural: Scalars['String'];
  singular: Scalars['String'];
};

export type User = Node & {
  __typename?: 'User';
  email: Scalars['String'];
  /** ID of the object. */
  id: Scalars['ID'];
  name: Scalars['String'];
  primaryAccount: Account;
  unconfirmedEmail?: Maybe<Scalars['String']>;
};

export type ValidationError = {
  __typename?: 'ValidationError';
  field: Scalars['String'];
  message: Scalars['String'];
};
