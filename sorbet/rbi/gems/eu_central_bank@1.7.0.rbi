# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `eu_central_bank` gem.
# Please instead update this file by running `bin/tapioca gem eu_central_bank`.

# source://eu_central_bank//lib/eu_central_bank.rb#9
class CurrencyUnavailable < ::StandardError; end

# source://eu_central_bank//lib/eu_central_bank/rates_document.rb#1
class EuCentralBank < ::Money::Bank::VariableExchange
  # @return [EuCentralBank] a new instance of EuCentralBank
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#27
  def initialize(st = T.unsafe(nil), &block); end

  # @raise [CurrencyUnavailable]
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#166
  def check_currency_available(currency); end

  # source://eu_central_bank//lib/eu_central_bank.rb#62
  def exchange(cents, from_currency, to_currency, date = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#66
  def exchange_with(from, to_currency, date = T.unsafe(nil)); end

  # @raise [Money::Bank::UnknownRateFormat]
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#119
  def export_rates(format, file = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#89
  def get_rate(from, to, date = T.unsafe(nil)); end

  # Returns the value of attribute historical_last_updated.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#15
  def historical_last_updated; end

  # Sets the attribute historical_last_updated
  #
  # @param value the value to set the attribute historical_last_updated to.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#15
  def historical_last_updated=(_arg0); end

  # Returns the value of attribute historical_rates_updated_at.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#16
  def historical_rates_updated_at; end

  # Sets the attribute historical_rates_updated_at
  #
  # @param value the value to set the attribute historical_rates_updated_at to.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#16
  def historical_rates_updated_at=(_arg0); end

  # @raise [Money::Bank::UnknownRateFormat]
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#141
  def import_rates(format, s, opts = T.unsafe(nil)); end

  # Returns the value of attribute last_updated.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#13
  def last_updated; end

  # Sets the attribute last_updated
  #
  # @param value the value to set the attribute last_updated to.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#13
  def last_updated=(_arg0); end

  # source://eu_central_bank//lib/eu_central_bank.rb#111
  def rates; end

  # Returns the value of attribute rates_updated_at.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#14
  def rates_updated_at; end

  # Sets the attribute rates_updated_at
  #
  # @param value the value to set the attribute rates_updated_at to.
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#14
  def rates_updated_at=(_arg0); end

  # source://eu_central_bank//lib/eu_central_bank.rb#49
  def save_historical_rates(cache, all = T.unsafe(nil)); end

  # @raise [InvalidCache]
  #
  # source://eu_central_bank//lib/eu_central_bank.rb#41
  def save_rates(cache, url = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#58
  def save_rates_to_s(url = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#103
  def set_rate(from, to, rate, date = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#36
  def update_historical_rates(cache = T.unsafe(nil), all = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#32
  def update_rates(cache = T.unsafe(nil), url = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#54
  def update_rates_from_s(content); end

  protected

  # source://eu_central_bank//lib/eu_central_bank.rb#201
  def copy_rates(rates_document, with_date = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#175
  def doc(cache, url = T.unsafe(nil)); end

  # source://eu_central_bank//lib/eu_central_bank.rb#184
  def parse_rates(io); end

  # source://eu_central_bank//lib/eu_central_bank.rb#219
  def update_parsed_historical_rates(rates_document); end

  # source://eu_central_bank//lib/eu_central_bank.rb#211
  def update_parsed_rates(rates_document); end

  private

  # source://eu_central_bank//lib/eu_central_bank.rb#229
  def calculate_exchange(from, to_currency, rate); end

  # source://eu_central_bank//lib/eu_central_bank.rb#237
  def open_url(url); end
end

# source://eu_central_bank//lib/eu_central_bank.rb#20
EuCentralBank::CURRENCIES = T.let(T.unsafe(nil), Array)

# source://eu_central_bank//lib/eu_central_bank.rb#19
EuCentralBank::DECIMAL_PRECISION = T.let(T.unsafe(nil), Integer)

# source://eu_central_bank//lib/eu_central_bank.rb#22
EuCentralBank::ECB_90_DAY_URL = T.let(T.unsafe(nil), String)

# source://eu_central_bank//lib/eu_central_bank.rb#23
EuCentralBank::ECB_ALL_HIST_URL = T.let(T.unsafe(nil), String)

# source://eu_central_bank//lib/eu_central_bank.rb#21
EuCentralBank::ECB_RATES_URL = T.let(T.unsafe(nil), String)

# source://eu_central_bank//lib/eu_central_bank.rb#25
EuCentralBank::LEGACY_CURRENCIES = T.let(T.unsafe(nil), Array)

# source://eu_central_bank//lib/eu_central_bank/rates_document.rb#2
class EuCentralBank::RatesDocument < ::Nokogiri::XML::SAX::Document
  # @return [RatesDocument] a new instance of RatesDocument
  #
  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#7
  def initialize; end

  # @raise [Nokogiri::XML::XPath::SyntaxError]
  #
  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#41
  def end_document; end

  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#14
  def error(msg); end

  # Returns the value of attribute errors.
  #
  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#4
  def errors; end

  # Returns the value of attribute rates.
  #
  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#3
  def rates; end

  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#22
  def start_element(name, attributes = T.unsafe(nil)); end

  # Returns the value of attribute updated_at.
  #
  # source://eu_central_bank//lib/eu_central_bank/rates_document.rb#5
  def updated_at; end
end

# source://eu_central_bank//lib/eu_central_bank.rb#18
EuCentralBank::SERIALIZER_DATE_SEPARATOR = T.let(T.unsafe(nil), String)

# source://eu_central_bank//lib/eu_central_bank.rb#7
class InvalidCache < ::StandardError; end

# source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#1
module Money::RatesStore; end

# source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#2
class Money::RatesStore::StoreWithHistoricalDataSupport < ::Money::RatesStore::Memory
  # source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#5
  def add_rate(currency_iso_from, currency_iso_to, rate, date = T.unsafe(nil)); end

  # Iterate over rate tuples (iso_from, iso_to, rate)
  #
  # @example
  #   store.each_rate do |iso_from, iso_to, rate, date|
  #   puts [iso_from, iso_to, rate, date].join
  #   end
  # @return [Enumerator]
  # @yieldparam iso_from [String] Currency ISO string.
  # @yieldparam iso_to [String] Currency ISO string.
  # @yieldparam rate [Numeric] Exchange rate.
  # @yieldparam date [Date] Historical date for the exchange rate. Nil if the rate is not historical rate.
  #
  # source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#31
  def each_rate(&block); end

  # source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#9
  def get_rate(currency_iso_from, currency_iso_to, date = T.unsafe(nil)); end

  # Wraps block execution in a thread-safe transaction
  #
  # source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#14
  def transaction(_force_sync = T.unsafe(nil), &block); end

  private

  # source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#46
  def rate_key_for(currency_iso_from, currency_iso_to, date = T.unsafe(nil)); end
end

# source://eu_central_bank//lib/money/rates_store/store_with_historical_data_support.rb#3
Money::RatesStore::StoreWithHistoricalDataSupport::INDEX_DATE_SEPARATOR = T.let(T.unsafe(nil), String)
